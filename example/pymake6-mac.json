{
    "variable.tips": [
        "QQt",
        "LibQQt",
        "${root.build}/${qqt.proj.name}/${qt.sys.mac}/${build.release}",
        "${root.src}/${qqt.proj.name}",
        "${qqt.proj.name}.pro",
        "${qqt.build.path}/src/bin",
        "${root.prod}/QQt",
        "qqtframe",
        "${qqt.build.path}/examples/${qqtframe.prod.name}/bin",
        "${qqt.build.path}/src/bin/QQt.framework",
        "QQt.framework/Versions/1/QQt",
        "${root.tool}/Source/qt5",
        "${root.build}/qt5",
        "androiddeployqt",
        "macdeployqt",
        "DownloadQueue",
        "/Users/abel/Develop/c1-webrc/DownloadQueue/DownloadQueue.pro",
        "${root.build}/${app.name}",
        "macdeployqt ${app.path.build}/${app.name}.app",
        "${prod.name}.app",
        "${mac.app}/Contents",
        "${mac.app.content}/MacOS",
        "${mac.app.content}/Frameworks",
        "${mac.app.content}/Resources",
        "${mac.app.content}/PlugIns",
        "${prod.name}.framework",
        "${prod.name}.framework/Versions",
        "${prod.name}.framework/Resources",
        "macdeployqt ${}"
    ],
    "command.tips": [
        "I'm not similar to these command, so list them here, rather than forgotten them",
        "cl-command, sys-command",
        "replace? no, append? easy!",
        "help you to remeber these command.",
        "mkdir -p ${qqt.build.path}",
        "cd ${build-path}",
        "cmake -G\"Unix Makefiles\" -DCMAKE_INSTALL_PREFIX=${prod-root} ${source-path}",
        "cmake -GXCode -DCMAKE_INSTALL_PREFIX=${prod-root} ${source-path}",
        "rm -f CMakeCache.txt",
        "qmake ${source-path}/${qmake-file} -spec $QTSPEC CONFIG+=$QTCONFIG && make qmake_all",
        "make -j4",
        "make clean in ${build-path}",
        "make install",
        "${deployqt} ${bin-path}/${app-bundle} -verbose=1",
        "${deployqt} -dmg",
        "${deployqt} --help",
        "cp -fr ${lib-dep} ${lib-native}",
        "install_name_tool -change ${lib-dep-name} @rpath/${lib-dep-name} ${app-native}/${prod-name} ",
        "install_name_tool -change $LibDep @rpath/$LibDep ${app-native}/${prod-name} ",
        "${source-path}/configure -prefix ${install-path} -hostprefix ${install-path} -xplatform android-g++ -release -nomake tests -nomake examples -android-ndk $ANDROID_NDK_ROOT -android-sdk $ANDROID_SDK_ROOT -android-ndk-host $ANDROID_NDK_HOST -android-toolchain-version $ANDROID_NDK_TOOLCHAIN_VERSION -skip qtwebkit-examples -no-warnings-are-errors",
        "${qt5.path.source}/configure -prefix ${qt5.path.install} -hostprefix ${qt5.path.install} -xplatform android-g++ -release -nomake tests -nomake examples -android-ndk $ANDROID_NDK_ROOT -android-sdk $ANDROID_SDK_ROOT -android-ndk-host $ANDROID_NDK_HOST -android-toolchain-version $ANDROID_NDK_TOOLCHAIN_VERSION -skip qtwebkit-examples -no-warnings-are-errors"
    ],
    "path-assemblage": {
        "root": "/Users/abel/Develop",
        "root.src": "${root}/a0-develop",
        "root.prod": "${root}/d0-product",
        "root.sdk": "${root}/d1-sdks",
        "root.tool": "${root}/b0-toolskits",
        "root.build": "${root}/c0-buildstation",
        "root.test": "${root}/f0-test",
        "root.webrc": "${root}/e0-webrc",
        "cc": "${root.tool}/a0-compiler",
        "pymake": "${cc}/PyMake",
        "wincc": "${root.tool}/macCompilers",
        "cmake.bin": "${wincc}/CMake.app/Contents/bin",
        "qt": "${root.tool}/macLibraries/Qt",
        "qt4.version": "4.8.6",
        "qt4.clang": "${qt}/${qt4.version}/clang_64",
        "qt4.clang.bin": "${qt4.clang}/bin",
        "qt5.version": "5.9.2",
        "qt5.ios": "${qt}/${qt5.version}/ios",
        "qt5.ios.bin": "${qt}/${qt5.version}/ios/bin",
        "qt5.clang": "${qt}/${qt5.version}/clang_64",
        "qt5.clang.bin": "${qt}/${qt5.version}/clang_64/bin",
        "qt5.android_arm": "${qt}/${qt5.version}/android_armv7",
        "qt5.android_arm.bin": "${qt}/${qt5.version}/android_armv7/bin",
        "qt5.android_x86": "${qt}/${qt5.version}/android_x86",
        "qt5.android_x86.bin": "${qt}/${qt5.version}/android_x86/bin",
        "android": "${root.tool}/macAndroidLibraries",
        "android.sdk": "${android}/android-sdk-macosx",
        "android.ndk": "${android}/android-ndk-r13b",
        "android.ant": "${android}/apache-ant-1.10.1",
        "android.java": "${android}/java-macosx/Java/JavaVirtualMachines",
        "sdk.plat.tool": "${android.sdk}/platform-tools",
        "sdk.build.tool": "${android.sdk}/build-tools",
        "sdk.tool": "${android.sdk}/tools",
        "java1.7.home": "${android.java}/jdk1.7.0_79.jdk/Contents/Home",
        "java1.8.home": "${android.java}/jdk1.8.0_111.jdk/Contents/Home",
        "java1.9.home": "${android.java}/jdk9.jdk/Contents/Home",
        "java1.7.bin": "${java1.7.home}/bin",
        "java1.8.bin": "${java1.8.home}/bin",
        "java1.9.bin": "${java1.9.home}/bin",
        "ant.bin": "${android.ant}/bin",
        "ndk.arm": "${android.ndk}/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64",
        "ndk.x86": "${android.ndk}/toolchains/x86-4.9/prebuilt/darwin-x86_64",
        "ndk.x86_64": "${android.ndk}/toolchains/x86_64-4.9/prebuilt/darwin-x86_64",
        "ndk.arm.bin": "${ndk.arm}/bin",
        "ndk.x86.bin": "${ndk.x86}/bin",
        "ndk.x86_64.bin": "${ndk.x86_64}/bin",
        "ios.simulator.sysroot": "/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk",
        "xcode.bin": "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin",
        "mac.sysroot": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"
    },
    "environ": {
        "android.mobile": {
            "path+": [
                "${qt5.android_arm.bin}",
                "${java1.8.bin}",
                "${android.sdk}",
                "${sdk.plat.tool}",
                "${sdk.build.tool}",
                "${sdk.tool}",
                "${ant.bin}",
                "${ndk.arm.bin}"
            ],
            "make0": "make",
            "CMAKEGENERATOR": "Unix Makefiles",
            "ANDROID_API_VERSION": "android-23",
            "ANDROID_SDK_ROOT": "${android.sdk}",
            "ANDROID_NDK_ROOT": "${android.ndk}",
            "ANDROID_NDK_HOST": "darwin-x86_64",
            "ANDROID_NDK_TOOLCHAIN_PREFIX": "arm-linux-androideabi",
            "ANDROID_NDK_TOOLCHAIN_VERSION": "4.9",
            "ANDROID_NDK_PLATFORM": "android-23",
            "NDK_TOOLCHAIN_PATH": "${ndk.arm.bin}",
            "NDK_TOOLS_PREFIX": "arm-linux-androideabi",
            "QTVERSION": "${qt5.version}",
            "QTDIR": "${qt5.android_arm}",
            "QTSPEC": "-spec android-g++",
            "QTCONFIG": "",
            "JAVA_HOME": "${java1.8.home}",
            "CLASSPATH": ".:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jar",
            "PYMAKE_MYNAME": "T.D.R",
            "a_special_var_const": "hello world",
            "QKIT": "ANDROID",
            "QSYS": "Android"
        },
        "android.x86": {
            "path+": [
                "${qt5.android_x86.bin}",
                "${java1.8.bin}",
                "${android.sdk}",
                "${sdk.plat.tool}",
                "${sdk.build.tool}",
                "${sdk.tool}",
                "${ant.bin}",
                "${ndk.x86.bin}"
            ],
            "make0": "make",
            "CMAKEGENERATOR": "Unix Makefiles",
            "CLICOLOR": "1",
            "ANDROID_API_VERSION": "android-23",
            "ANDROID_HOME": "${android.sdk}",
            "ANDROID_SDK_ROOT": "${android.sdk}",
            "ANDROID_NDK_PLATFORM": "android-23",
            "ANDROID_NDK_ROOT": "${android.ndk}",
            "ANDROID_NDK_HOST": "darwin-x86_64",
            "ANDROID_NDK_TOOLCHAIN_PREFIX": "x86",
            "ANDROID_NDK_TOOLCHAIN_VERSION": "4.9",
            "ANDROID_NDK_TOOLS_PREFIX": "i686-linux-android",
            "NDK_TOOLCHAIN_PATH": "${ndk.x86.bin}",
            "NDK_TOOLS_PREFIX": "i686-linux-android",
            "PYMAKE_MYNAME": "T.D.R",
            "a_special_var_const": "hello world",
            "QTDIR": "${qt5.android_x86}",
            "QTSPEC": "-spec android-g++",
            "QTCONFIG": "",
            "JAVA_HOME": "${java1.8.home}",
            "CLASSPATH": ".:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jar",
            "QTVERSION": "${qt5.version}",
            "QKIT": "ANDROIDX86",
            "QSYS": "AndroidX86"
        },
        "qt4": {
            "path+": [
                "${qt4.clang.bin}"
            ],
            "make0": "make",
            "CMAKEGENERATOR": "Unix Makefiles",
            "QTVERSION": "${qt4.version}",
            "QTDIR": "${qt4.clang}",
            "QTSPEC": "-spec macx-llvm",
            "QTCONFIG": "CONFIG+=x86_64",
            "QKIT": "macOS",
            "QSYS": "macOS"
        },
        "ios": {
            "path+": [
                "${qt5.ios.bin}"
            ],
            "make0": "make",
            "CMAKEGENERATOR": "Unix Makefiles",
            "QTVERSION": "${qt5.version}",
            "QTDIR": "${qt5.ios}",
            "QTSPEC": "-spec macx-ios-clang",
            "QTCONFIG": "CONFIG+=iphoneos CONFIG+=device -after QMAKE_MAC_XCODE_SETTINGS+=qteam qteam.name=DEVELOPMENT_TEAM qteam.value=4EGMLT3G6T",
            "QKIT": "iOS",
            "QSYS": "iOS"
        },
        "iossimulator": {
            "path+": [
                "${qt5.ios.bin}"
            ],
            "make0": "make",
            "CMAKEGENERATOR": "Unix Makefiles",
            "QTVERSION": "${qt5.version}",
            "QTDIR": "${qt5.ios}",
            "QTSPEC": "-spec macx-ios-clang",
            "QTCONFIG": "CONFIG+=iphonesimulator CONFIG+=simulator",
            "QKIT": "iOSSimulator",
            "QSYS": "iOSSimulator"
        },
        "macos": {
            "path+": [
                "${qt5.clang.bin}"
            ],
            "make0": "make",
            "CMAKEGENERATOR": "Unix Makefiles",
            "QTVERSION": "${qt5.version}",
            "QTDIR": "${qt5.clang}",
            "QTSPEC": "-spec macx-clang",
            "QTCONFIG": "CONFIG+=x86_64",
            "QKIT": "macOS",
            "QSYS": "macOS"
        },
        "current": "macos"
    },
    "command": {
        "test": [
            "echo $(pwd)"
        ],
        "test.2": [
            "#echo $*",
            "param=$*",
            "ping 127.0.0.1 $param"
        ],
        "test.3": [
            "#echo $*",
            "ping $*"
        ],
        "test.4": [
            "echo param1: $1",
            "echo param2: $2",
            "echo param3: $3",
            "echo param4: $4"
        ],
        "test.5": [
            "exit 0"
        ],
        "test.6": [
            "echo 中文"
        ],
        "test.7": [
            "echo $PATH"
        ],
        "open.env": [
            "open $(pymake source)",
            "open $(pymake source root)/custom.path+.ini",
            "open $(pymake source root)/custom.var+.ini"
        ],
        "qt": [
            "open \"/Applications/Qt Creator.app\""
        ],
        "cmake0": [
            "open ${wincc}/CMake.app"
        ],
        "prod": [
            "open /Users/abel/Develop/d0-product/ProductExecTool/macOS/ProductExecTool_debug.app"
        ],
        "libtool": [
            "open /Users/abel/Develop/d0-product/AddLibraryTool/macOS/AddLibraryTool_debug.app"
        ],
        "android.sdk": [
            "/Users/abel/Develop/b0-toolskits/macAndroidLibraries/android-sdk-macosx/tools/android"
        ],
        "open-dir": [
            "open $1"
        ],
        "qtdir": [
            "echo $QTDIR"
        ],
        "build.info": [
            "while [ 1 ]",
            "do",
            "src_path=$(pwd)",
            "profilename=$1",
            "if [ \"$profilename\" == \"\" ]; then",
            "   echo please input a project name",
            "   break",
            "fi",
            "if [ -f \"$1.pro\" ]; then",
            "   echo $1.pro existed.",
            "else",
            "   echo has $1.pro? please add here command to restrict.",
            "   break",
            "fi",
            "src=$src_path/$profilename.pro",
            "build=${root.build}/$profilename/$QSYS/$QTVERSION/Debug",
            "prod=${root.prod}/$profilename/$QSYS",
            "sdk=${root.sdk}/$profilename/$QSYS",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "echo build at: $build",
            "echo build inf $QTSPEC $QTCONFIG",
            "endtime=`date +'%Y-%m-%d %H:%M:%S'`",
            "echo 现在时间：$endtime",
            "break",
            "done"
        ],
        "build.qmake": [
            "while [ 1 ]",
            "do",
            "src_path=$(pwd)",
            "profilename=$1",
            "if [ \"$profilename\" == \"\" ]; then",
            "   echo please input a project name",
            "   break",
            "fi",
            "if [ -f \"$1.pro\" ]; then",
            "   echo $1.pro existed.",
            "else",
            "   echo has $1.pro? please add here command to restrict.",
            "   break",
            "fi",
            "src=$src_path/$profilename.pro",
            "build=${root.build}/$profilename/$QSYS/$QTVERSION/Debug",
            "prod=${root.prod}/$profilename/$QSYS",
            "sdk=${root.sdk}/$profilename/$QSYS",
            "mkdir -p $build",
            "cd $build",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "echo build at: $build",
            "echo $QTSPEC $QTCONFIG",
            "#starttime=`date +'%Y-%m-%d %H:%M:%S'`",
            "qmake $src $QTSPEC CONFIG+=debug CONFIG+=qml_debug $QTCONFIG && make qmake_all",
            "make -j4",
            "echo build inf $QTSPEC $QTCONFIG",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo build at: $build",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "#endtime=`date +'%Y-%m-%d %H:%M:%S'`",
            "#start_seconds=$(date --date=\"$starttime\" +%s);",
            "#end_seconds=$(date --date=\"$endtime\" +%s);",
            "#echo \"本次运行时间： \"$((end_seconds-start_seconds))\"s\"",
            "break",
            "done"
        ],
        "build.qmake.all": [
            "while [ 1 ]",
            "do",
            "src_path=$(pwd)",
            "profilename=$1",
            "if [ \"$profilename\" == \"\" ]; then",
            "   echo please input a project name",
            "   break",
            "fi",
            "if [ -f \"$1.pro\" ]; then",
            "   echo $1.pro existed.",
            "else",
            "   echo has $1.pro? please add here command to restrict.",
            "   break",
            "fi",
            "echo You must use pymake system ccvp here command to execute this command!",
            "envlist=(\"macos\" \"iossimulator\" \"android.mobile\" \"android.x86\")",
            "length=${#envlist[@]}",
            "cmd0=${envlist[0]}",
            "#for envname in $envlist 这个是个bug",
            "for envname in ${envlist[@]}",
            "do",
            "   #echo $envname",
            "   #echo pymake use $envname ccvp here build.qmake $profilename",
            "   #export aiya=$envname",
            "   #echo $aiya",
            "   #osascript -e \"",
            "   #    set a to \\\"$aiya\\\"",
            "   #    tell application \\\"Terminal\\\" to do script \\\"echo - $a - \\\" & a & - \\\"$aiya\\\"",
            "   #\"",
            "   #osascript",
            "   #set a to POSIX file \"$envname\"",
            "   #env",
            "   #osascript -e 'tell application \"Terminal\" to do script \"echo $aiya\"'",
            "   osascript -e \"",
            "       tell application \\\"Terminal\\\" to do script \\\"cd $src_path && echo $profilename - $envname && pymake use $envname ccvp here build.qmake $profilename\\\"",
            "   \"",
            "done",
            "break",
            "done"
        ],
        "build.cmake.gui": [
            "while [ 1 ]",
            "do",
            "src_path=$(pwd)",
            "profilename=$1",
            "if [ \"$profilename\" == \"\" ]; then",
            "   echo please input a project name",
            "   break",
            "fi",
            "if [ -f \"CMakeLists.txt\" ]; then",
            "   echo CMakeLists.txt existed.",
            "else",
            "   echo has CMakeLists.txt? please add here command to restrict.",
            "   break",
            "fi",
            "src=$src_path/CMakeLists.txt",
            "build=${root.build}/$profilename/$QSYS/$QTVERSION/Debug",
            "prod=${root.prod}/$profilename/$QSYS",
            "sdk=${root.sdk}/$profilename/$QSYS",
            "mkdir -p $build",
            "cd $build",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "echo build at: $build",
            "echo $QTSPEC $QTCONFIG",
            "open ${wincc}/CMake.app",
            "errorlevel=$?",
            "if [ $errorlevel -ne 0 ]; then",
            "   echo cmake exit code: $errorlevel",
            "   break",
            "fi",
            "echo build inf $QTSPEC $QTCONFIG",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo build at: $build",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "break",
            "done"
        ],
        "build.cmake.sdk": [
            "while [ 1 ]",
            "do",
            "src_path=$(pwd)",
            "profilename=$1",
            "if [ \"$profilename\" == \"\" ]; then",
            "   echo please input a project name",
            "   break",
            "fi",
            "if [ -f \"CMakeLists.txt\" ]; then",
            "   echo CMakeLists.txt existed.",
            "else",
            "   echo has CMakeLists.txt? please add here command to restrict.",
            "   break",
            "fi",
            "src=$src_path/CMakeLists.txt",
            "build=${root.build}/$profilename/$QSYS/$QTVERSION/Debug",
            "prod=${root.prod}/$profilename/$QSYS",
            "sdk=${root.sdk}/$profilename/$QSYS",
            "mkdir -p $build",
            "cd $build",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "echo build at: $build",
            "echo $QTSPEC $QTCONFIG",
            "cmake $src_path -G\"$CMAKEGENERATOR\" -DCMAKE_INSTALL_PREFIX=${root.sdk}/$profilename/$QSYS -DCMAKE_BUILD_TYPE=Debug",
            "errorlevel=$?",
            "if [ $errorlevel -ne 0 ]; then",
            "   echo cmake exit code: $errorlevel",
            "   break",
            "fi",
            "echo build inf $QTSPEC $QTCONFIG",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo build at: $build",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "break",
            "done"
        ],
        "build.cmake.app": [
            "while [ 1 ]",
            "do",
            "src_path=$(pwd)",
            "profilename=$1",
            "if [ \"$profilename\" == \"\" ]; then",
            "   echo please input a project name",
            "   break",
            "fi",
            "if [ -f \"CMakeLists.txt\" ]; then",
            "   echo CMakeLists.txt existed.",
            "else",
            "   echo has CMakeLists.txt? please add here command to restrict.",
            "   break",
            "fi",
            "src=$src_path/CMakeLists.txt",
            "build=${root.build}/$profilename/$QSYS/$QTVERSION/Debug",
            "prod=${root.prod}/$profilename/$QSYS",
            "sdk=${root.sdk}/$profilename/$QSYS",
            "mkdir -p $build",
            "cd $build",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "echo build at: $build",
            "echo $QTSPEC $QTCONFIG",
            "cmake $src_path -G\"$CMAKEGENERATOR\" -DCMAKE_INSTALL_PREFIX=${root.prod}/$profilename/$QSYS -DCMAKE_BUILD_TYPE=Debug",
            "errorlevel=$?",
            "if [ $errorlevel -ne 0 ]; then",
            "   echo cmake exit code: $errorlevel",
            "   break",
            "fi",
            "echo build inf $QTSPEC $QTCONFIG",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo build at: $build",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "break",
            "done"
        ],
        "build.make": [
            "while [ 1 ]",
            "do",
            "src_path=$(pwd)",
            "profilename=$1",
            "if [ \"$profilename\" == \"\" ]; then",
            "   echo please input a project name",
            "   break",
            "fi",
            "src=$src_path/$profilename.pro",
            "build=${root.build}/$profilename/$QSYS/$QTVERSION/Debug",
            "prod=${root.prod}/$profilename/$QSYS",
            "sdk=${root.sdk}/$profilename/$QSYS",
            "#mkdir -p $build",
            "cd $build",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "echo build at: $build",
            "echo $QTSPEC $QTCONFIG",
            "#qmake $src $QTSPEC CONFIG+=debug CONFIG+=qml_debug $QTCONFIG && $make0 qmake_all",
            "$make0",
            "echo build inf $QTSPEC $QTCONFIG",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo build at: $build",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "break",
            "done"
        ],
        "build.make.install": [
            "while [ 1 ]",
            "do",
            "src_path=$(pwd)",
            "profilename=$1",
            "if [ \"$profilename\" == \"\" ]; then",
            "   echo please input a project name",
            "   break",
            "fi",
            "src=$src_path/$profilename.pro",
            "build=${root.build}/$profilename/$QSYS/$QTVERSION/Debug",
            "prod=${root.prod}/$profilename/$QSYS",
            "sdk=${root.sdk}/$profilename/$QSYS",
            "#mkdir -p $build",
            "cd $build",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "echo build at: $build",
            "echo $QTSPEC $QTCONFIG",
            "#qmake $src $QTSPEC CONFIG+=debug CONFIG+=qml_debug $QTCONFIG && $make0 qmake_all",
            "$make0 install",
            "echo build inf $QTSPEC $QTCONFIG",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo build at: $build",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "break",
            "done"
        ],
        "build.make.clean": [
            "while [ 1 ]",
            "do",
            "src_path=$(pwd)",
            "profilename=$1",
            "if [ \"$profilename\" == \"\" ]; then",
            "   echo please input a project name",
            "   break",
            "fi",
            "src=$src_path/$profilename.pro",
            "build=${root.build}/$profilename/$QSYS/$QTVERSION/Debug",
            "prod=${root.prod}/$profilename/$QSYS",
            "sdk=${root.sdk}/$profilename/$QSYS",
            "#mkdir -p $build",
            "cd $build",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "echo build at: $build",
            "echo $QTSPEC $QTCONFIG",
            "#qmake $src $QTSPEC CONFIG+=debug CONFIG+=qml_debug $QTCONFIG && $make0 qmake_all",
            "$make0 clean",
            "echo build inf $QTSPEC $QTCONFIG",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo build at: $build",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "break",
            "done"
        ],
        "build.go": [
            "while [ 1 ]",
            "do",
            "src_path=$(pwd)",
            "profilename=$1",
            "if [ \"$profilename\" == \"\" ]; then",
            "   echo please input a project name",
            "   break",
            "fi",
            "if [ -f \"$1.go\" ]; then",
            "   echo $1.go existed.",
            "else",
            "   echo has $1.go? please add here command to restrict.",
            "   break",
            "fi",
            "src=$src_path/$profilename.go",
            "build=${root.build}/$profilename/$QSYS/$QTVERSION/Debug",
            "prod=${root.prod}/$profilename/$QSYS",
            "sdk=${root.sdk}/$profilename/$QSYS",
            "mkdir -p $build",
            "cd $build",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "echo build at: $build",
            "echo $QTSPEC $QTCONFIG",
            "#qmake $src $QTSPEC CONFIG+=debug CONFIG+=qml_debug $QTCONFIG && make qmake_all",
            "#make -j4",
            "go build $src",
            "echo build inf $QTSPEC $QTCONFIG",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo build at: $build",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "break",
            "done"
        ],
        "build.configure": [
            "while [ 1 ]",
            "do",
            "src_path=$(pwd)",
            "profilename=$1",
            "if [ \"$profilename\" == \"\" ]; then",
            "   echo please input a project name",
            "   break",
            "fi",
            "if [ -f \"configure\" ]; then",
            "   echo configure existed.",
            "else",
            "   echo has configure? please add here command to restrict.",
            "   break",
            "fi",
            "src=$src_path/configure",
            "build=${root.build}/$profilename/$QSYS/$QTVERSION/Debug",
            "prod=${root.prod}/$profilename/$QSYS",
            "sdk=${root.sdk}/$profilename/$QSYS",
            "mkdir -p $build",
            "cd $build",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "echo build at: $build",
            "echo $QTSPEC $QTCONFIG",
            "#qmake $src $QTSPEC CONFIG+=debug CONFIG+=qml_debug $QTCONFIG && make qmake_all",
            "#make -j4",
            "configure \"$@\"",
            "echo build inf $QTSPEC $QTCONFIG",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo build at: $build",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "break",
            "done"
        ],
        "build.autogen": [
            "while [ 1 ]",
            "do",
            "src_path=$(pwd)",
            "profilename=$1",
            "if [ \"$profilename\" == \"\" ]; then",
            "   echo please input a project name",
            "   break",
            "fi",
            "if [ -f \"autogen.sh\" ]; then",
            "   echo autogen.sh existed.",
            "else",
            "   echo has autogen.sh? please add here command to restrict.",
            "   break",
            "fi",
            "src=$src_path/autogen.sh",
            "build=${root.build}/$profilename/$QSYS/$QTVERSION/Debug",
            "prod=${root.prod}/$profilename/$QSYS",
            "sdk=${root.sdk}/$profilename/$QSYS",
            "mkdir -p $build",
            "cd $build",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "echo build at: $build",
            "echo $QTSPEC $QTCONFIG",
            "#qmake $src $QTSPEC CONFIG+=debug CONFIG+=qml_debug $QTCONFIG && make qmake_all",
            "#make -j4",
            "autogen.sh \"$@\"",
            "echo build inf $QTSPEC $QTCONFIG",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo build at: $build",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "break",
            "done"
        ],
        "run": [
            "while [ 1 ]",
            "do",
            "src_path=$(pwd)",
            "profilename=$1",
            "if [ \"$profilename\" == \"\" ]; then",
            "   echo please input a project name",
            "   break",
            "fi",
            "src=$src_path/$profilename.pro",
            "prod=${root.prod}/$profilename/$QSYS",
            "sdk=${root.sdk}/$profilename/$QSYS",
            "build=${root.build}/$profilename/$QSYS/$QTVERSION/Debug",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "echo build at: $build",
            "echo build inf $QTSPEC $QTCONFIG",
            "endtime=`date +'%Y-%m-%d %H:%M:%S'`",
            "echo 现在时间：$endtime",
            "mkdir -p $build/Debug/bin",
            "relapath=$2",
            "exeroot=$build/Debug/bin/$relapath",
            "exe=$exeroot/$profilename.app",
            "echo execute : $exe",
            "if [ -d \"$exe\" ]; then",
            "   echo $exe existed.",
            "else",
            "   echo $exe is not existed.",
            "   break",
            "fi",
            "cd $exeroot",
            "open $exe",
            "break",
            "done"
        ],
        "run.d": [
            "while [ 1 ]",
            "do",
            "src_path=$(pwd)",
            "profilename=$1",
            "if [ \"$profilename\" == \"\" ]; then",
            "   echo please input a project name",
            "   break",
            "fi",
            "src=$src_path/$profilename.pro",
            "prod=${root.prod}/$profilename/$QSYS",
            "sdk=${root.sdk}/$profilename/$QSYS",
            "build=${root.build}/$profilename/$QSYS/$QTVERSION/Debug",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "echo build at: $build",
            "echo build inf $QTSPEC $QTCONFIG",
            "endtime=`date +'%Y-%m-%d %H:%M:%S'`",
            "echo 现在时间：$endtime",
            "mkdir -p $build/Debug/bin",
            "relapath=$2",
            "exeroot=$build/Debug/bin/$relapath",
            "exe=$exeroot/${profilename}_debug.app",
            "echo execute : $exe",
            "if [ -d \"$exe\" ]; then",
            "   echo $exe existed.",
            "else",
            "   echo $exe is not existed.",
            "   break",
            "fi",
            "cd $exeroot",
            "open $exe",
            "break",
            "done"
        ],
        "run.prod": [
            "while [ 1 ]",
            "do",
            "src_path=$(pwd)",
            "profilename=$1",
            "if [ \"$profilename\" == \"\" ]; then",
            "   echo please input a project name",
            "   break",
            "fi",
            "src=$src_path/$profilename.pro",
            "prod=${root.prod}/$profilename/$QSYS",
            "sdk=${root.sdk}/$profilename/$QSYS",
            "build=${root.build}/$profilename/$QSYS/$QTVERSION/Debug",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "echo build at: $build",
            "echo build inf $QTSPEC $QTCONFIG",
            "endtime=`date +'%Y-%m-%d %H:%M:%S'`",
            "echo 现在时间：$endtime",
            "#mkdir -p $build/Debug/bin",
            "relapath=$2",
            "exeroot=$prod/$relapath",
            "exe=$exeroot/$profilename.app",
            "echo execute : $exe",
            "if [ -d \"$exe\" ]; then",
            "   echo $exe existed.",
            "else",
            "   echo $exe is not existed.",
            "   break",
            "fi",
            "cd $exeroot",
            "open $exe",
            "break",
            "done"
        ],
        "run.prod.d": [
            "while [ 1 ]",
            "do",
            "src_path=$(pwd)",
            "profilename=$1",
            "if [ \"$profilename\" == \"\" ]; then",
            "   echo please input a project name",
            "   break",
            "fi",
            "src=$src_path/$profilename.pro",
            "prod=${root.prod}/$profilename/$QSYS",
            "sdk=${root.sdk}/$profilename/$QSYS",
            "build=${root.build}/$profilename/$QSYS/$QTVERSION/Debug",
            "echo src file: $src",
            "echo src path: $src_path",
            "echo sdk   at: $sdk",
            "echo prod  at: $prod",
            "echo build at: $build",
            "echo build inf $QTSPEC $QTCONFIG",
            "endtime=`date +'%Y-%m-%d %H:%M:%S'`",
            "echo 现在时间：$endtime",
            "#mkdir -p $build/Debug/bin",
            "relapath=$2",
            "exeroot=$prod/$relapath",
            "exe=$exeroot/${profilename}_debug.app",
            "echo execute : $exe",
            "if [ -d \"$exe\" ]; then",
            "   echo $exe existed.",
            "else",
            "   echo $exe is not existed.",
            "   break",
            "fi",
            "cd $exeroot",
            "open $exe",
            "break",
            "done"
        ],
        "Qt.move": [
            "while [ 1 ]",
            "do",
            "srcdir=$1",
            "srcver=$2",
            "if [ \"$1\" = \"\" ]; then",
            "   echo please input old qtdir.",
            "   break",
            "fi",
            "if [ \"$2\" = \"\" ]; then",
            "   echo please input old qtversion.",
            "   break",
            "fi",
            "mv -f $srcdir/$srcver/* Qt2/$srcver/",
            "mv -f $srcdir/Docs/* Qt2/Docs/",
            "mv -f $srcdir/Examples/* Qt2/Examples/",
            "mv -f $srcdir/*.zip Qt2/",
            "break",
            "done"
        ],
        "qt4.build": [
            "src=${root.tool}/z0-Source/qt",
            "build=${root.build}/qt",
            "install=${root.tool}/macLibraries/Qt/4.8/gcc_64",
            "mkdir -p $build",
            "cd $build",
            "echo build $(pwd)",
            "CXXFLAGS=-stdlib=libc++",
            "${src}/configure -prefix ${install}",
            "make -j4",
            "make install"
        ],
        "qtsoap.build": [
            "src=/Users/abel/Develop/c1-webrc/qt-solutions/qtsoap",
            "build=${root.build}/qtsoap",
            "install=/Users/abel/Develop/d1-product/QtSoap",
            "cd $build",
            "${src}/configure -library"
        ],
        "qqt.build.all": [
            "osascript -e 'tell application \"Terminal\" to do script \"echo hello\"'"
        ],
        "qqt.daily": [
            "src_path=/Users/abel/Develop/a0-develop/LibQQt",
            "src=$src_path/QQt.pro",
            "build=/Users/abel/Develop/c0-buildstation/QQt/$QSYS/$QTVERSION/Debug",
            "mkdir -p $build",
            "cd $build",
            "rm -rf src examples",
            "qmake $src $QTSPEC $QTCONFIG CONFIG+=debug CONFIG+=qml_debug && make qmake_all",
            "make -j4"
        ],
        "qqt.daily.release": [
            "src_path=/Users/abel/Develop/a0-develop/LibQQt",
            "src=$src_path/QQt.pro",
            "build=/Users/abel/Develop/c0-buildstation/QQt/$QSYS/$QTVERSION/Release",
            "mkdir -p $build",
            "cd $build",
            "rm -rf src examples",
            "qmake $src $QTSPEC $QTCONFIG CONFIG+=release && make qmake_all",
            "make -j4"
        ],
        "qqt.build.release": [
            "src_path=/Users/abel/Develop/a0-develop/LibQQt",
            "src=$src_path/QQt.pro",
            "build=/Users/abel/Develop/c0-buildstation/QQt/$QSYS/$QTVERSION/Release",
            "mkdir -p $build",
            "cd $build",
            "qmake $src $QTSPEC $QTCONFIG CONFIG+=release && make qmake_all",
            "make -j4"
        ],
        "qqt.build": [
            "src_path=${root.src}/LibQQt",
            "src=${root.src}/LibQQt/QQt.pro",
            "build=${root.build}/QQt/$QSYS/$QTVERSION/Debug",
            "mkdir -p $build",
            "cd $build",
            "echo build $(pwd)",
            "qmake ${src} $QTSPEC CONFIG+=debug CONFIG+=qml_debug $QTCONFIG && make qmake_all",
            "make -j4"
        ],
        "qqt.clean": [
            "src=${root.src}/LibQQt/QQt.pro",
            "build=${root.build}/QQt/$QSYS/$QTVERSION/Debug",
            "cd $build",
            "make clean"
        ],
        "qqt.clean.release": [
            "src=/Users/abel/Develop/a0-develop/LibQQt/QQt.pro",
            "build=/Users/abel/Develop/c0-buildstation/QQt/$QSYS/$QTVERSION/Release",
            "cd $build",
            "make clean"
        ],
        "qt.check": [
            "src=${root.tool}/z0-Source/qt-everywhere-opensource-src-4.8.7",
            "build=${root.build}/qt4.7",
            "install=${root.tool}/macLibraries/Qt/4.8.7/gcc_64",
            "mkdir -p $build",
            "cd $build",
            "echo build $(pwd)",
            "${src}/configure --help"
        ],
        "qt.build": [
            "src=/Users/abel/Develop/b0-toolskits/z0-Source/qt",
            "build=/Users/abel/Develop/c0-buildstation/qt",
            "install=/Users/abel/Develop/b0-toolskits/macLibraries/Qt/4.8/gcc_64",
            "mkdir -p $build",
            "cd $build",
            "echo build $(pwd)",
            "CXXFLAGS=-stdlib=libc++",
            "${src}/configure -prefix ${install}",
            "make -j4",
            "make install"
        ],
        "qt4.7.build": [
            "src=${root.tool}/z0-Source/qt-everywhere-opensource-src-4.8.7",
            "build=${root.build}/qt4.7",
            "install=${root.tool}/macLibraries/Qt/4.8.7/gcc_64",
            "mkdir -p $build",
            "cd $build",
            "echo build $(pwd)",
            "${src}/configure -prefix ${install}",
            "make -j4",
            "make install"
        ],
        "soap.build": [
            "src=/Users/abel/Develop/c1-webrc/qt-solutions/qtsoap",
            "build=/Users/abel/Develop/c0-buildstation/qtsoap",
            "install=/Users/abel/Develop/d1-product/QtSoap",
            "cd $build",
            "${src}/configure -library"
        ],
        "qqt.push": [
            "src=${root.src}/LibQQt",
            "cd $src",
            "git push",
            "git push --tag"
        ],
        "qqt.pull": [
            "src=${root.src}/LibQQt",
            "cd $src",
            "git pull"
        ],
        "qqt.cloc": [
            "src=${root.src}/LibQQt",
            "cd $src",
            "perl ${pymake}/demo/cloc-1.74.pl  .",
            "date"
        ],
        "light.cloc": [
            "src=${root.src}/LightUnderWater/App",
            "cd $src",
            "perl ${pymake}/demo/cloc-1.74.pl  .",
            "date"
        ]
    }
}